/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * EVM TAX FARM API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  CommentResponse,
  CreateCommentDto,
  FileUploadControllerUploadSingleBody,
  MockCreateTaxFarmDto,
  TaxFarmControllerFindStatisticUserParams,
  TaxFarmControllerGetParams,
  TaxFarmResponse,
  TaxFarmStatisticResponse,
  TaxFarmStatisticUserResponse,
  UpsertTaxFarmOffChainDto,
  UpsertUserDto,
  UserResponse,
} from "./models";

export const taxFarmControllerGet = (
  params?: TaxFarmControllerGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TaxFarmResponse[]>> => {
  return axios.default.get(`/api/token`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getTaxFarmControllerGetQueryKey = (
  params?: TaxFarmControllerGetParams,
) => {
  return [`/api/token`, ...(params ? [params] : [])] as const;
};

export const getTaxFarmControllerGetQueryOptions = <
  TData = Awaited<ReturnType<typeof taxFarmControllerGet>>,
  TError = AxiosError<unknown>,
>(
  params?: TaxFarmControllerGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTaxFarmControllerGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof taxFarmControllerGet>>
  > = ({ signal }) => taxFarmControllerGet(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof taxFarmControllerGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TaxFarmControllerGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof taxFarmControllerGet>>
>;
export type TaxFarmControllerGetQueryError = AxiosError<unknown>;

export function useTaxFarmControllerGet<
  TData = Awaited<ReturnType<typeof taxFarmControllerGet>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | TaxFarmControllerGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof taxFarmControllerGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTaxFarmControllerGet<
  TData = Awaited<ReturnType<typeof taxFarmControllerGet>>,
  TError = AxiosError<unknown>,
>(
  params?: TaxFarmControllerGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof taxFarmControllerGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTaxFarmControllerGet<
  TData = Awaited<ReturnType<typeof taxFarmControllerGet>>,
  TError = AxiosError<unknown>,
>(
  params?: TaxFarmControllerGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useTaxFarmControllerGet<
  TData = Awaited<ReturnType<typeof taxFarmControllerGet>>,
  TError = AxiosError<unknown>,
>(
  params?: TaxFarmControllerGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTaxFarmControllerGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const taxFarmControllerUpsert = (
  upsertTaxFarmOffChainDto: UpsertTaxFarmOffChainDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TaxFarmResponse>> => {
  return axios.default.post(`/api/token`, upsertTaxFarmOffChainDto, options);
};

export const getTaxFarmControllerUpsertMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof taxFarmControllerUpsert>>,
    TError,
    { data: UpsertTaxFarmOffChainDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof taxFarmControllerUpsert>>,
  TError,
  { data: UpsertTaxFarmOffChainDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof taxFarmControllerUpsert>>,
    { data: UpsertTaxFarmOffChainDto }
  > = (props) => {
    const { data } = props ?? {};

    return taxFarmControllerUpsert(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TaxFarmControllerUpsertMutationResult = NonNullable<
  Awaited<ReturnType<typeof taxFarmControllerUpsert>>
>;
export type TaxFarmControllerUpsertMutationBody = UpsertTaxFarmOffChainDto;
export type TaxFarmControllerUpsertMutationError = AxiosError<unknown>;

export const useTaxFarmControllerUpsert = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof taxFarmControllerUpsert>>,
    TError,
    { data: UpsertTaxFarmOffChainDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof taxFarmControllerUpsert>>,
  TError,
  { data: UpsertTaxFarmOffChainDto },
  TContext
> => {
  const mutationOptions = getTaxFarmControllerUpsertMutationOptions(options);

  return useMutation(mutationOptions);
};

export const taxFarmControllerUpdate = (
  upsertTaxFarmOffChainDto: UpsertTaxFarmOffChainDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TaxFarmResponse>> => {
  return axios.default.patch(`/api/token`, upsertTaxFarmOffChainDto, options);
};

export const getTaxFarmControllerUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof taxFarmControllerUpdate>>,
    TError,
    { data: UpsertTaxFarmOffChainDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof taxFarmControllerUpdate>>,
  TError,
  { data: UpsertTaxFarmOffChainDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof taxFarmControllerUpdate>>,
    { data: UpsertTaxFarmOffChainDto }
  > = (props) => {
    const { data } = props ?? {};

    return taxFarmControllerUpdate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TaxFarmControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof taxFarmControllerUpdate>>
>;
export type TaxFarmControllerUpdateMutationBody = UpsertTaxFarmOffChainDto;
export type TaxFarmControllerUpdateMutationError = AxiosError<unknown>;

export const useTaxFarmControllerUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof taxFarmControllerUpdate>>,
    TError,
    { data: UpsertTaxFarmOffChainDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof taxFarmControllerUpdate>>,
  TError,
  { data: UpsertTaxFarmOffChainDto },
  TContext
> => {
  const mutationOptions = getTaxFarmControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const taxFarmControllerCreateMock = (
  mockCreateTaxFarmDto: MockCreateTaxFarmDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TaxFarmResponse>> => {
  return axios.default.post(`/api/token/mock`, mockCreateTaxFarmDto, options);
};

export const getTaxFarmControllerCreateMockMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof taxFarmControllerCreateMock>>,
    TError,
    { data: MockCreateTaxFarmDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof taxFarmControllerCreateMock>>,
  TError,
  { data: MockCreateTaxFarmDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof taxFarmControllerCreateMock>>,
    { data: MockCreateTaxFarmDto }
  > = (props) => {
    const { data } = props ?? {};

    return taxFarmControllerCreateMock(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TaxFarmControllerCreateMockMutationResult = NonNullable<
  Awaited<ReturnType<typeof taxFarmControllerCreateMock>>
>;
export type TaxFarmControllerCreateMockMutationBody = MockCreateTaxFarmDto;
export type TaxFarmControllerCreateMockMutationError = AxiosError<unknown>;

export const useTaxFarmControllerCreateMock = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof taxFarmControllerCreateMock>>,
    TError,
    { data: MockCreateTaxFarmDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof taxFarmControllerCreateMock>>,
  TError,
  { data: MockCreateTaxFarmDto },
  TContext
> => {
  const mutationOptions =
    getTaxFarmControllerCreateMockMutationOptions(options);

  return useMutation(mutationOptions);
};

export const taxFarmControllerFindStatistic = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TaxFarmStatisticResponse>> => {
  return axios.default.get(`/api/token/statistic`, options);
};

export const getTaxFarmControllerFindStatisticQueryKey = () => {
  return [`/api/token/statistic`] as const;
};

export const getTaxFarmControllerFindStatisticQueryOptions = <
  TData = Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTaxFarmControllerFindStatisticQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>
  > = ({ signal }) =>
    taxFarmControllerFindStatistic({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TaxFarmControllerFindStatisticQueryResult = NonNullable<
  Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>
>;
export type TaxFarmControllerFindStatisticQueryError = AxiosError<unknown>;

export function useTaxFarmControllerFindStatistic<
  TData = Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTaxFarmControllerFindStatistic<
  TData = Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTaxFarmControllerFindStatistic<
  TData = Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useTaxFarmControllerFindStatistic<
  TData = Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof taxFarmControllerFindStatistic>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTaxFarmControllerFindStatisticQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const taxFarmControllerFindStatisticUser = (
  params: TaxFarmControllerFindStatisticUserParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TaxFarmStatisticUserResponse>> => {
  return axios.default.get(`/api/token/statistic/user`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getTaxFarmControllerFindStatisticUserQueryKey = (
  params: TaxFarmControllerFindStatisticUserParams,
) => {
  return [`/api/token/statistic/user`, ...(params ? [params] : [])] as const;
};

export const getTaxFarmControllerFindStatisticUserQueryOptions = <
  TData = Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>,
  TError = AxiosError<unknown>,
>(
  params: TaxFarmControllerFindStatisticUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTaxFarmControllerFindStatisticUserQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>
  > = ({ signal }) =>
    taxFarmControllerFindStatisticUser(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TaxFarmControllerFindStatisticUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>
>;
export type TaxFarmControllerFindStatisticUserQueryError = AxiosError<unknown>;

export function useTaxFarmControllerFindStatisticUser<
  TData = Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>,
  TError = AxiosError<unknown>,
>(
  params: TaxFarmControllerFindStatisticUserParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTaxFarmControllerFindStatisticUser<
  TData = Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>,
  TError = AxiosError<unknown>,
>(
  params: TaxFarmControllerFindStatisticUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTaxFarmControllerFindStatisticUser<
  TData = Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>,
  TError = AxiosError<unknown>,
>(
  params: TaxFarmControllerFindStatisticUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useTaxFarmControllerFindStatisticUser<
  TData = Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>,
  TError = AxiosError<unknown>,
>(
  params: TaxFarmControllerFindStatisticUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerFindStatisticUser>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTaxFarmControllerFindStatisticUserQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const taxFarmControllerFindOne = (
  hash: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TaxFarmResponse>> => {
  return axios.default.get(`/api/token/${hash}`, options);
};

export const getTaxFarmControllerFindOneQueryKey = (hash: string) => {
  return [`/api/token/${hash}`] as const;
};

export const getTaxFarmControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof taxFarmControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  hash: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTaxFarmControllerFindOneQueryKey(hash);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof taxFarmControllerFindOne>>
  > = ({ signal }) =>
    taxFarmControllerFindOne(hash, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!hash,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof taxFarmControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TaxFarmControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof taxFarmControllerFindOne>>
>;
export type TaxFarmControllerFindOneQueryError = AxiosError<unknown>;

export function useTaxFarmControllerFindOne<
  TData = Awaited<ReturnType<typeof taxFarmControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  hash: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof taxFarmControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTaxFarmControllerFindOne<
  TData = Awaited<ReturnType<typeof taxFarmControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  hash: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof taxFarmControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTaxFarmControllerFindOne<
  TData = Awaited<ReturnType<typeof taxFarmControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  hash: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useTaxFarmControllerFindOne<
  TData = Awaited<ReturnType<typeof taxFarmControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  hash: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof taxFarmControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTaxFarmControllerFindOneQueryOptions(hash, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const commentsControllerCreate = (
  createCommentDto: CreateCommentDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommentResponse>> => {
  return axios.default.post(`/api/comments`, createCommentDto, options);
};

export const getCommentsControllerCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof commentsControllerCreate>>,
    TError,
    { data: CreateCommentDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof commentsControllerCreate>>,
  TError,
  { data: CreateCommentDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof commentsControllerCreate>>,
    { data: CreateCommentDto }
  > = (props) => {
    const { data } = props ?? {};

    return commentsControllerCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommentsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof commentsControllerCreate>>
>;
export type CommentsControllerCreateMutationBody = CreateCommentDto;
export type CommentsControllerCreateMutationError = AxiosError<unknown>;

export const useCommentsControllerCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof commentsControllerCreate>>,
    TError,
    { data: CreateCommentDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof commentsControllerCreate>>,
  TError,
  { data: CreateCommentDto },
  TContext
> => {
  const mutationOptions = getCommentsControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const commentsControllerFindOne = (
  hash: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CommentResponse[]>> => {
  return axios.default.get(`/api/comments/${hash}`, options);
};

export const getCommentsControllerFindOneQueryKey = (hash: string) => {
  return [`/api/comments/${hash}`] as const;
};

export const getCommentsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof commentsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  hash: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commentsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCommentsControllerFindOneQueryKey(hash);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof commentsControllerFindOne>>
  > = ({ signal }) =>
    commentsControllerFindOne(hash, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!hash,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof commentsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CommentsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof commentsControllerFindOne>>
>;
export type CommentsControllerFindOneQueryError = AxiosError<unknown>;

export function useCommentsControllerFindOne<
  TData = Awaited<ReturnType<typeof commentsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  hash: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commentsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof commentsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useCommentsControllerFindOne<
  TData = Awaited<ReturnType<typeof commentsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  hash: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commentsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof commentsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useCommentsControllerFindOne<
  TData = Awaited<ReturnType<typeof commentsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  hash: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commentsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useCommentsControllerFindOne<
  TData = Awaited<ReturnType<typeof commentsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  hash: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commentsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCommentsControllerFindOneQueryOptions(hash, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usersControllerUpsert = (
  upsertUserDto: UpsertUserDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UserResponse>> => {
  return axios.default.post(`/api/user`, upsertUserDto, options);
};

export const getUsersControllerUpsertMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpsert>>,
    TError,
    { data: UpsertUserDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerUpsert>>,
  TError,
  { data: UpsertUserDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerUpsert>>,
    { data: UpsertUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return usersControllerUpsert(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerUpsertMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpsert>>
>;
export type UsersControllerUpsertMutationBody = UpsertUserDto;
export type UsersControllerUpsertMutationError = AxiosError<unknown>;

export const useUsersControllerUpsert = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpsert>>,
    TError,
    { data: UpsertUserDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerUpsert>>,
  TError,
  { data: UpsertUserDto },
  TContext
> => {
  const mutationOptions = getUsersControllerUpsertMutationOptions(options);

  return useMutation(mutationOptions);
};

export const usersControllerFindOne = (
  walletAddress: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UserResponse>> => {
  return axios.default.get(`/api/user/${walletAddress}`, options);
};

export const getUsersControllerFindOneQueryKey = (walletAddress: string) => {
  return [`/api/user/${walletAddress}`] as const;
};

export const getUsersControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  walletAddress: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersControllerFindOneQueryKey(walletAddress);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersControllerFindOne>>
  > = ({ signal }) =>
    usersControllerFindOne(walletAddress, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!walletAddress,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof usersControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindOne>>
>;
export type UsersControllerFindOneQueryError = AxiosError<unknown>;

export function useUsersControllerFindOne<
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  walletAddress: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUsersControllerFindOne<
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  walletAddress: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUsersControllerFindOne<
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  walletAddress: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useUsersControllerFindOne<
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  walletAddress: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUsersControllerFindOneQueryOptions(
    walletAddress,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const healthCheckControllerHealthCheck = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`/api/health-check`, options);
};

export const getHealthCheckControllerHealthCheckQueryKey = () => {
  return [`/api/health-check`] as const;
};

export const getHealthCheckControllerHealthCheckQueryOptions = <
  TData = Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHealthCheckControllerHealthCheckQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>
  > = ({ signal }) =>
    healthCheckControllerHealthCheck({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type HealthCheckControllerHealthCheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>
>;
export type HealthCheckControllerHealthCheckQueryError = AxiosError<unknown>;

export function useHealthCheckControllerHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHealthCheckControllerHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHealthCheckControllerHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useHealthCheckControllerHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof healthCheckControllerHealthCheck>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getHealthCheckControllerHealthCheckQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const fileUploadControllerUploadSingle = (
  fileUploadControllerUploadSingleBody: FileUploadControllerUploadSingleBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  const formData = new FormData();
  if (fileUploadControllerUploadSingleBody.file !== undefined) {
    formData.append("file", fileUploadControllerUploadSingleBody.file);
  }

  return axios.default.post(`/api/file-upload/single`, formData, options);
};

export const getFileUploadControllerUploadSingleMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fileUploadControllerUploadSingle>>,
    TError,
    { data: FileUploadControllerUploadSingleBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof fileUploadControllerUploadSingle>>,
  TError,
  { data: FileUploadControllerUploadSingleBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fileUploadControllerUploadSingle>>,
    { data: FileUploadControllerUploadSingleBody }
  > = (props) => {
    const { data } = props ?? {};

    return fileUploadControllerUploadSingle(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FileUploadControllerUploadSingleMutationResult = NonNullable<
  Awaited<ReturnType<typeof fileUploadControllerUploadSingle>>
>;
export type FileUploadControllerUploadSingleMutationBody =
  FileUploadControllerUploadSingleBody;
export type FileUploadControllerUploadSingleMutationError = AxiosError<unknown>;

export const useFileUploadControllerUploadSingle = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fileUploadControllerUploadSingle>>,
    TError,
    { data: FileUploadControllerUploadSingleBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof fileUploadControllerUploadSingle>>,
  TError,
  { data: FileUploadControllerUploadSingleBody },
  TContext
> => {
  const mutationOptions =
    getFileUploadControllerUploadSingleMutationOptions(options);

  return useMutation(mutationOptions);
};

export const fileUploadControllerGet = (
  fileName: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Blob>> => {
  return axios.default.get(`/api/file-upload/${fileName}`, {
    responseType: "blob",
    ...options,
  });
};

export const getFileUploadControllerGetQueryKey = (fileName: string) => {
  return [`/api/file-upload/${fileName}`] as const;
};

export const getFileUploadControllerGetQueryOptions = <
  TData = Awaited<ReturnType<typeof fileUploadControllerGet>>,
  TError = AxiosError<unknown>,
>(
  fileName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fileUploadControllerGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFileUploadControllerGetQueryKey(fileName);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fileUploadControllerGet>>
  > = ({ signal }) =>
    fileUploadControllerGet(fileName, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!fileName,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fileUploadControllerGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type FileUploadControllerGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof fileUploadControllerGet>>
>;
export type FileUploadControllerGetQueryError = AxiosError<unknown>;

export function useFileUploadControllerGet<
  TData = Awaited<ReturnType<typeof fileUploadControllerGet>>,
  TError = AxiosError<unknown>,
>(
  fileName: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fileUploadControllerGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fileUploadControllerGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useFileUploadControllerGet<
  TData = Awaited<ReturnType<typeof fileUploadControllerGet>>,
  TError = AxiosError<unknown>,
>(
  fileName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fileUploadControllerGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fileUploadControllerGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useFileUploadControllerGet<
  TData = Awaited<ReturnType<typeof fileUploadControllerGet>>,
  TError = AxiosError<unknown>,
>(
  fileName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fileUploadControllerGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useFileUploadControllerGet<
  TData = Awaited<ReturnType<typeof fileUploadControllerGet>>,
  TError = AxiosError<unknown>,
>(
  fileName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fileUploadControllerGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getFileUploadControllerGetQueryOptions(
    fileName,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
